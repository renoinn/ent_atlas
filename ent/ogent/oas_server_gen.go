// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateUsers implements createUsers operation.
	//
	// Creates a new Users and persists it to storage.
	//
	// POST /users
	CreateUsers(ctx context.Context, req CreateUsersReq) (CreateUsersRes, error)
	// DeleteUsers implements deleteUsers operation.
	//
	// Deletes the Users with the requested ID.
	//
	// DELETE /users/{id}
	DeleteUsers(ctx context.Context, params DeleteUsersParams) (DeleteUsersRes, error)
	// ListUsers implements listUsers operation.
	//
	// List Users.
	//
	// GET /users
	ListUsers(ctx context.Context, params ListUsersParams) (ListUsersRes, error)
	// ReadUsers implements readUsers operation.
	//
	// Finds the Users with the requested ID and returns it.
	//
	// GET /users/{id}
	ReadUsers(ctx context.Context, params ReadUsersParams) (ReadUsersRes, error)
	// UpdateUsers implements updateUsers operation.
	//
	// Updates a Users and persists changes to storage.
	//
	// PATCH /users/{id}
	UpdateUsers(ctx context.Context, req UpdateUsersReq, params UpdateUsersParams) (UpdateUsersRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...Option) (*Server, error) {
	s, err := newConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
